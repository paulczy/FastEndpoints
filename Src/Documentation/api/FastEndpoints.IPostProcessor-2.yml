### YamlMime:ManagedReference
items:
- uid: FastEndpoints.IPostProcessor`2
  commentId: T:FastEndpoints.IPostProcessor`2
  id: IPostProcessor`2
  parent: FastEndpoints
  children:
  - FastEndpoints.IPostProcessor`2.PostProcessAsync(`0,`1,Microsoft.AspNetCore.Http.HttpContext,IReadOnlyCollection{ValidationFailure},CancellationToken)
  langs:
  - csharp
  - vb
  name: IPostProcessor<TRequest, TResponse>
  nameWithType: IPostProcessor<TRequest, TResponse>
  fullName: FastEndpoints.IPostProcessor<TRequest, TResponse>
  type: Interface
  source:
    id: IPostProcessor
    path: D:\SOURCE-CONTROL\FastEndpoints\Src\Documentation\src\Library\Interfaces.cs
    startLine: 45
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  summary: "\ninterface for defining post-processors to be executed after the main endpoint handler is done\n"
  example: []
  syntax:
    content: public interface IPostProcessor<TRequest, TResponse>
    typeParameters:
    - id: TRequest
      description: the type of the request dto
    - id: TResponse
      description: the type of the response dto
    content.vb: Public Interface IPostProcessor(Of TRequest, TResponse)
  nameWithType.vb: IPostProcessor(Of TRequest, TResponse)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: FastEndpoints.IPostProcessor(Of TRequest, TResponse)
  name.vb: IPostProcessor(Of TRequest, TResponse)
- uid: FastEndpoints.IPostProcessor`2.PostProcessAsync(`0,`1,Microsoft.AspNetCore.Http.HttpContext,IReadOnlyCollection{ValidationFailure},CancellationToken)
  commentId: M:FastEndpoints.IPostProcessor`2.PostProcessAsync(`0,`1,Microsoft.AspNetCore.Http.HttpContext,IReadOnlyCollection{ValidationFailure},CancellationToken)
  id: PostProcessAsync(`0,`1,Microsoft.AspNetCore.Http.HttpContext,IReadOnlyCollection{ValidationFailure},CancellationToken)
  parent: FastEndpoints.IPostProcessor`2
  langs:
  - csharp
  - vb
  name: PostProcessAsync(TRequest, TResponse, HttpContext, IReadOnlyCollection<ValidationFailure>, CancellationToken)
  nameWithType: IPostProcessor<TRequest, TResponse>.PostProcessAsync(TRequest, TResponse, HttpContext, IReadOnlyCollection<ValidationFailure>, CancellationToken)
  fullName: FastEndpoints.IPostProcessor<TRequest, TResponse>.PostProcessAsync(TRequest, TResponse, Microsoft.AspNetCore.Http.HttpContext, IReadOnlyCollection<ValidationFailure>, CancellationToken)
  type: Method
  source:
    id: PostProcessAsync
    path: D:\SOURCE-CONTROL\FastEndpoints\Src\Documentation\src\Library\Interfaces.cs
    startLine: 47
  assemblies:
  - FastEndpoints
  namespace: FastEndpoints
  syntax:
    content: Task PostProcessAsync(TRequest req, TResponse res, HttpContext ctx, IReadOnlyCollection<ValidationFailure> failures, CancellationToken ct)
    parameters:
    - id: req
      type: '{TRequest}'
    - id: res
      type: '{TResponse}'
    - id: ctx
      type: Microsoft.AspNetCore.Http.HttpContext
    - id: failures
      type: IReadOnlyCollection{ValidationFailure}
    - id: ct
      type: CancellationToken
    return:
      type: Task
    content.vb: Function PostProcessAsync(req As TRequest, res As TResponse, ctx As HttpContext, failures As IReadOnlyCollection(Of ValidationFailure), ct As CancellationToken) As Task
  overload: FastEndpoints.IPostProcessor`2.PostProcessAsync*
  nameWithType.vb: IPostProcessor(Of TRequest, TResponse).PostProcessAsync(TRequest, TResponse, HttpContext, IReadOnlyCollection(Of ValidationFailure), CancellationToken)
  fullName.vb: FastEndpoints.IPostProcessor(Of TRequest, TResponse).PostProcessAsync(TRequest, TResponse, Microsoft.AspNetCore.Http.HttpContext, IReadOnlyCollection(Of ValidationFailure), CancellationToken)
  name.vb: PostProcessAsync(TRequest, TResponse, HttpContext, IReadOnlyCollection(Of ValidationFailure), CancellationToken)
references:
- uid: FastEndpoints
  commentId: N:FastEndpoints
  name: FastEndpoints
  nameWithType: FastEndpoints
  fullName: FastEndpoints
- uid: FastEndpoints.IPostProcessor`2.PostProcessAsync*
  commentId: Overload:FastEndpoints.IPostProcessor`2.PostProcessAsync
  name: PostProcessAsync
  nameWithType: IPostProcessor<TRequest, TResponse>.PostProcessAsync
  fullName: FastEndpoints.IPostProcessor<TRequest, TResponse>.PostProcessAsync
  nameWithType.vb: IPostProcessor(Of TRequest, TResponse).PostProcessAsync
  fullName.vb: FastEndpoints.IPostProcessor(Of TRequest, TResponse).PostProcessAsync
- uid: '{TRequest}'
  commentId: '!:TRequest'
  definition: TRequest
  name: TRequest
  nameWithType: TRequest
  fullName: TRequest
- uid: '{TResponse}'
  commentId: '!:TResponse'
  definition: TResponse
  name: TResponse
  nameWithType: TResponse
  fullName: TResponse
- uid: Microsoft.AspNetCore.Http.HttpContext
  commentId: T:Microsoft.AspNetCore.Http.HttpContext
  parent: Microsoft.AspNetCore.Http
  isExternal: true
  name: HttpContext
  nameWithType: HttpContext
  fullName: Microsoft.AspNetCore.Http.HttpContext
- uid: IReadOnlyCollection{ValidationFailure}
  commentId: '!:IReadOnlyCollection{ValidationFailure}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<ValidationFailure>
  nameWithType: IReadOnlyCollection<ValidationFailure>
  fullName: IReadOnlyCollection<ValidationFailure>
  nameWithType.vb: IReadOnlyCollection(Of ValidationFailure)
  fullName.vb: IReadOnlyCollection(Of ValidationFailure)
  name.vb: IReadOnlyCollection(Of ValidationFailure)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ValidationFailure
    name: ValidationFailure
    nameWithType: ValidationFailure
    fullName: ValidationFailure
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ValidationFailure
    name: ValidationFailure
    nameWithType: ValidationFailure
    fullName: ValidationFailure
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: CancellationToken
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: TRequest
  name: TRequest
  nameWithType: TRequest
  fullName: TRequest
- uid: TResponse
  name: TResponse
  nameWithType: TResponse
  fullName: TResponse
- uid: Microsoft.AspNetCore.Http
  commentId: N:Microsoft.AspNetCore.Http
  isExternal: true
  name: Microsoft.AspNetCore.Http
  nameWithType: Microsoft.AspNetCore.Http
  fullName: Microsoft.AspNetCore.Http
- uid: IReadOnlyCollection`1
  commentId: '!:IReadOnlyCollection`1'
  isExternal: true
  name: IReadOnlyCollection<>
  nameWithType: IReadOnlyCollection<>
  fullName: IReadOnlyCollection<>
  nameWithType.vb: IReadOnlyCollection(Of )
  fullName.vb: IReadOnlyCollection(Of )
  name.vb: IReadOnlyCollection(Of )
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
